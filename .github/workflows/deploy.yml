name: Deploy Telegram Bot

on:
  push:
    branches: [master]

permissions:
  id-token: write  # Необходимо для OIDC
  contents: read    # Для actions/checkout

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from pyproject.toml
        id: version
        run: |
          VERSION=$(grep 'version =' pyproject.toml | awk -F\" '{print $2}')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

#      - name: Configure OIDC
#        id: oidc
#        uses: yc-actions/auth@v1
#        with:
#          federation-id: ${{ secrets.YC_FEDERATION_ID }}
#          cloud-id: ${{ secrets.YC_CLOUD_ID }}
#          service-account-id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}

#      - name: Login to Yandex Container Registry
#        uses: yc-actions/yc-cr-login@v2
#        with:
#            oidc-provider: github  # Используем встроенную OID-аутентификацию
#            federation-id: ${{ secrets.YC_FEDERATION_ID }}
#            cloud-id: ${{ secrets.YC_CLOUD_ID }}
#            service-account-id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
#            registry-id: ${{ secrets.YC_REGISTRY_ID }}


      - name: Login to Yandex Container Registry
        uses: yc-actions/yc-cr-login@v2
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
      - name: Build and push Docker image
        env:
          CR_REGISTRY: ${{ secrets.YC_REGISTRY_ID }}
          CR_REPOSITORY: basketball-statistics-telegram-bot
          IMAGE_TAG: ${{ steps.version.outputs.version }}
        run: |
            docker build -t cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG .
            docker push cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG

#      - name: Delete old image (version-2)
#        env:
#          VERSION: ${{ steps.version.outputs.version }}
#          REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
#          YC_IAM_TOKEN: ${{ secrets.YC_IAM_TOKEN }}
#        run: |
#          # Convert version to array (e.g., 1.2.3 → [1, 2, 3])
#          IFS='.' read -ra V <<< "$VERSION"
#          OLD_PATCH=$((V[2] - 2))
#          OLD_VERSION="${V[0]}.${V[1]}.$OLD_PATCH"
#
#          # Check if image exists and delete
#          if curl -s -H "Authorization: Bearer $YC_IAM_TOKEN" \
#            "https://container-registry.api.cloud.yandex.net/container-registry/v1/images?repositoryName=bot&folderId=$REGISTRY_ID" | grep -q "$OLD_VERSION"; then
#            echo "Deleting version: $OLD_VERSION"
#            yc container image delete --id cr.yandex/$REGISTRY_ID/bot:$OLD_VERSION
#          else
#            echo "Old version $OLD_VERSION not found, skipping deletion."
#          fi
#
      - name: Deploy Serverless Container
        id: deploy-sls-container
        uses: yc-actions/yc-sls-container-deploy@v2
        env:
          CR_REGISTRY: ${{ secrets.YC_REGISTRY_ID }}
          CR_REPOSITORY: basketball-statistics-telegram-bot
          IMAGE_TAG: ${{ steps.version.outputs.version }}
          ACTIONS_STEP_DEBUG: true
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          container-name: basketball-statistics-telegram-bot
          folder-id:  ${{ secrets.YC_SLS_FOLDER_ID }}
          revision-service-account-id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
          revision-env: WEBHOOK=${{ secrets.TG_BOT_WEBHOOK }}
          revision-secrets: |
            token=${{ secrets.YC_LOCKBOX_SECRET_ID }}/${{ secrets.YC_LOCKBOX_SECRET_VERSION_ID }}/${{ secrets.YC_LOCKBOX_SECRET_KEY }}
          revision-cores: 1
          revision-memory: 768Mb
          revision-core-fraction: 5
          revision-concurrency: 1
          revision-image-url: cr.yandex/${{ env.CR_REGISTRY }}/${{ env.CR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          revision-execution-timeout: 180